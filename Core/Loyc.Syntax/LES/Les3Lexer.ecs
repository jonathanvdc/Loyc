#ecs;
#importMacros(Loyc.LLPG);
using System(, .Text, .Linq, .Collections.Generic, .Diagnostics);
using Loyc;               // optional (for IMessageSink, Symbol, etc.)
using Loyc.Collections;   // optional (many handy interfaces & classes)
using Loyc.Syntax.Lexing; // For BaseLexer

namespace Loyc.Syntax.Les; // braces around the rest of the file are optional

using TT = TokenType; // Abbreviate TokenType as TT
using P = LesPrecedence;
using S = CodeSymbols;

public partial class Les3Lexer
{
	[FullLLk, AddCsLineDirectives(false)]
	LLLPG (lexer) @{
	// `@{` invokes LLLPG in ANTLR-style syntax mode, but there are several 
	// differences; see http://ecsharp.net/lllpg/lllpg-in-antlr-style.html

	// Whitespace & comments -------------------------------------------------

	extern token Spaces : (' '|'\t')+;
	token DotIndent : ( '.' ('\t'|' '+) )*;

	token Newline[bool ignoreIndent = false] returns [object result] :
		( '\r' '\n'? | '\n' )
		{AfterNewline(ignoreIndent, skipIndent: false);}
		{return WhitespaceTag.Value;};
	private token SLComment returns [object result] :
		"//" (~('\r'|'\n'))* 
		{return WhitespaceTag.Value;};
	[LL(3)] private token MLComment returns [object result] :
		"/*" nongreedy(MLComment / Newline(true) / _)* "*/"
		{return WhitespaceTag.Value;};
		
	// Numbers ---------------------------------------------------------------
	
	private token Number returns [object result] :
		{ _isFloat = _isNegative = false; _typeSuffix = null; }
		('-' {_isNegative = true;})?
		(HexNumber / BinNumber / DecNumber)
		{int numberEndPosition = InputPosition;}
		(_typeSuffix=NumberSuffix(ref _isFloat))?
		{
			_type = _isNegative ? TT.NegativeLiteral : TT.Literal;
			return ParseNumberValue(numberEndPosition);
		};

	private DecDigits : '0'..'9'+ greedy('_' '0'..'9'+)* greedy('_')? ;
	[inline] HexDigit  : '0'..'9' | 'a'..'f' | 'A'..'F' ;
	private HexDigits : greedy(HexDigit)+ greedy('_' greedy(HexDigit)+)* greedy('_')? ;
	private DecNumber :
		{_numberBase=10;}
		( '.' DecDigits   {_isFloat=true;}
		| DecDigits     ( {_isFloat=true;} '.' DecDigits )?
		)
		greedy( {_isFloat=true;} ('e'|'E') ('+'|'-')? DecDigits )?
		;
	private HexNumber() :
		'0' ('x'|'X') {_numberBase=16;}
		greedy(HexDigits)?
		// Avoid ambiguity with 0x5.Equals(): a dot is not enough
		(	'.' ('0'..'9' => () / &( HexDigits ('p'|'P') ('+'|'-'|'0'..'9') ))
			{_isFloat=true;} HexDigits )?
		greedy( {_isFloat=true;} ('p'|'P') ('+'|'-')? DecDigits )?
		;
	private BinNumber :
		'0' ('b'|'B')     {_numberBase=2;}
		( '.' DecDigits   {_isFloat=true;}
		| DecDigits     ( {_isFloat=true;} '.' DecDigits )?
		)
		greedy( {_isFloat=true;} ('p'|'P') ('+'|'-')? DecDigits )?
		;
	
	[LL(4)] private NumberSuffix[ref bool isFloat] returns [Symbol result] 
		@init {var here = InputPosition;}
		: // known suffixes
		  ( ('f'|'F') {$result = _F; isFloat=true;}
		  | ('d'|'D') {$result = _D; isFloat=true;}
		  | ('m'|'M') {$result = _M; isFloat=true;}
		  | ('l'|'L') {$result = _L;} (('u'|'U') {$result = _UL;})?
		  | ('u'|'U') {$result = _U;} (('l'|'L') {$result = _UL;})?
		  | "u32" {$result = _U;}
		  | "u64" {$result = _UL;}
		  | "i32" {$result = null;}
		  | "i64" {$result = _L;}
		  | "f32" {$result = _F;}
		  | "f64" {$result = _D;}
		  ) EndId
		/ NormalId // unknown suffixes
		  { $result = IdToSymbol(CharSource.Slice(here, InputPosition - here)); };

	// Used by NumberSuffix to detect end-of-suffix
	[inline] extern token EndId : (~('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'#') | EOF) =>;

	// Strings ---------------------------------------------------------------
		
	private token SQString returns [object result] :
		{_parseNeeded = false;}
		'\'' ('\\' _ {_parseNeeded = true;} | ~('\''|'\\'|'\r'|'\n')) '\'' 
		{return ParseSQStringValue();};
	
	private token DQString returns [object result] :
		{_parseNeeded = false;}
		(	'"' [ '\\' _ {_parseNeeded = true;} | ~('"'|'\\'|'\r'|'\n') ]* 
			('"' / {_parseNeeded = true;}) )
		{return ParseStringValue(false);};
	
	[LL(4)] private token TQString returns [object result] :
		{_parseNeeded = true;}
		{_style = NodeStyle.Alternate;}
		(	'"' '"' '"' nongreedy(Newline(true) / _)* '"' '"' '"' 
			| {_style |= NodeStyle.Alternate2;}
				"'''"   nongreedy(Newline(true) / _)* "'''" )
		{return ParseStringValue(true, true);};

	private BQString :
		{_parseNeeded = false;}
		'`' ('\\' _ {_parseNeeded = true;} | ~('`'|'\\'|'\r'|'\n'))* '`';

	// Nontrivial punctuation & operators -----------------------------------
		
	private token OpChar :
		'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$';
	private token Operator returns [object result] : 
		OpChar+ {return ParseNormalOp();} ;
	private token SQOperator returns [object result] : 
		"'" LettersOrPunc+ // at least one letter/punc required so that 
		                   // sequences like '(...) are reserved for future use
		{return ParseNormalOp();};

	// Identifiers, keywords and named literals --------------------------------

	[inline] extern token IdStartChar : '_'|'a'..'z'|'A'..'Z' ;
	// FIXME: 0x80..0xFFFC makes LLLPG make a HashSet<int> of unreasonable size.
	//        To fix, I plan to make a special struct type wrapping HashSet<int>
	private token IdExtLetter : &{char.IsLetter((char) $LA)} 0x80..0xFFFC ;

	private NormalId : 
		(IdStartChar | IdExtLetter) 
		greedy(IdStartChar | '#' | '0'..'9' | '\'' &!("''") | IdExtLetter)*;
	
	private token Id returns [object result] :
		( BQString {$result = ParseBQStringValue();}
		| NormalId {
			$result = IdToSymbol(Text());
			if ($result == @@true)  { _type = TT.Literal; return G.BoxedTrue; }
			if ($result == @@false) { _type = TT.Literal; return G.BoxedFalse; }
			if ($result == @@null)  { _type = TT.Literal; return null; }
		  }
		)
		(	{saveAndRestore(_startPosition); _startPosition = InputPosition;}
			(value:TQString / value:DQString)
			{
				_type = TT.Literal;
				if ($result == @@s)
					return (Symbol)value.ToString();
				else
					return new SpecialLiteral(value, (Symbol)result);
			}
		)?;

	private token LettersOrPunc : '0'..'9'|'a'..'z'|'A'..'Z'|'_'|'#'
		|'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$' ;

	private token SpecialLiteral returns [object result] :
		{saveAndRestore(_startPosition);}
		"@@" {int here = InputPosition;} 
		LettersOrPunc+ {
			var sym = CharSource.Slice(here, InputPosition - here);
			if (!NamedLiterals.TryGetValue(sym, $(out result)))
				$result = IdToSymbol(sym); 
		};

	private token Keyword returns [object result] :
		'#' LettersOrPunc+ {return IdToSymbol(Text());};

	// Shebang (optional feature) --------------------------------------------

	private token Shebang returns [object result] : 
		&{InputPosition == 0} "#!" ~('\r'|'\n')* Newline? 
		{return WhitespaceTag.Value;};

	// Token -----------------------------------------------------------------

	[LL(4)] public override token NextToken returns [Maybe<Token> result] :
		( Spaces / &{InputPosition == _lineStartAt} '.' (' '|'\t') => DotIndent )?
		{
			_startPosition = InputPosition;
			_style = 0;
			if (LA0 == -1) { // EOF
				return NoValue.Value;
			}
		}
		( {_type = TT.Shebang;}    value:Shebang
		/ {_type = TT.Literal;}    value:SpecialLiteral
		/ {_type = TT.Id;}         value:Id
		/ {_type = TT.Keyword;}    value:Keyword
		/ {_type = TT.Newline;}    value:Newline
		/ {_type = TT.SLComment;}  value:SLComment
		/ {_type = TT.MLComment;}  value:MLComment
		/ {_type = TT.Literal;}    value:Number
		/ {_type = TT.Literal;}    value:TQString
		/ {_type = TT.Literal;}    value:DQString
		/ {_type = TT.Literal;}    value:SQString
		/ {_type = TT.NormalOp;}   value:SQOperator
		/ {_type = TT.Unknown;}    "''" // avoid invoking TQString when there are only two ticks
		/ {_type = TT.Comma;}      ',' { value = GSymbol.Empty; }
		/ {_type = TT.Semicolon;}  ';' { value = GSymbol.Empty; }
		/ {_type = TT.LParen;}     '('
		/ {_type = TT.RParen;}     ')'
		/ {_type = TT.LBrack;}     '['
		/ {_type = TT.RBrack;}     ']'
		/ {_type = TT.LBrace;}     '{'
		/ {_type = TT.RBrace;}     '}'
		/ {_type = TT.LTokenLiteral;} "'{"  // possibility #1: less consistent: normally ' is for operators
		/ {_type = TT.LTokenLiteral;} "@@{" // possibility #2: heavy, but more consistent (@@ is for literals)
		/ {_type = TT.At;}         '@' { value = GSymbol.Empty; }
		/                          value:Operator
		/ error _ {_type = TT.Unknown;}
		)
		{	Debug.Assert(InputPosition > _startPosition);
			return new Token((int) _type, _startPosition, InputPosition - _startPosition, _style, value);
		};

	// Partial tokens used for syntax highlighting. An LES syntax highlighter
	// can record the token continued in each line (''', """ or /*) call one
	// of these rules to proces that token until it ends or the line ends.
		
	[LL(3)]
	[#new] public token TDQStringLine returns [bool result] :
		nongreedy(_)* (Newline(true) {return false;} | '"' '"' '"' {return true;});
	[LL(3)]
	[#new] public token TSQStringLine returns [bool result] :
		nongreedy(_)* (Newline(true) {return false;} | "'''" {return true;});
	[#new] public token MLCommentLine[ref int nested] returns [bool result] :
		(greedy
			( &{nested>0} "*/" {nested--;}
			/ "/*" {nested++;}
			/ ~('\r'|'\n'|'*')
			/ '*' (&!'/')
			))*
		(Newline(true) {return false;} | "*/" {return true;});

	}; // end LLLPG lexer
};
