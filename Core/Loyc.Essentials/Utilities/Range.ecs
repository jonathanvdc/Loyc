using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loyc.Math;
using Loyc.Collections;

namespace Loyc
{
	/// <summary>
	/// Contains the functions used by the Enhanced C# <c>in</c>, <c>..</c> and 
	/// <c>...</c> operators... plus the handy <c>PutInRange()</c> methods.
	/// </summary>
	/// <remarks>
	/// <ul>
	/// <li><c>n.IsInRange(lo, hi)</c> returns true if <c>n >= lo && hi >= n</c>, 
	///     which corresponds to <c>n in lo...hi</c> in EC#.</li>
	/// <li><c>n.IsInRangeExcludeHi(lo, hi)</c> returns true if <c>n >= lo && hi > n</c>,
	///     which corresponds to <c>n in lo..hi</c> in EC#.</li>
	/// </ul>
	/// Note that if `in` and a range operator are not used together, something 
	/// slightly different happens:
	/// <ul>
	/// <li><c>var r = lo..hi</c> becomes Range.ExcludeHi(lo, hi)</c> 
	///     (<c>Range.Inclusive</c> for <c>...</c>).</li>
	/// <li><c>x in r</c> becomes <c>r.Contains(x)</c>.</li>
	/// </ul>
	/// </remarks>
	public static class Range
	{
		// IsInRange/PutInRange methods
		unroll (Num in (int, uint, long, ulong, float, double))
		{
			public static bool IsInRangeExcludeHi(this Num num, Num lo, Num hi) { 
				return num >= lo && num < hi;
			}
			public static bool IsInRange(this Num num, Num lo, Num hi) { 
				return num >= lo && num <= hi;
			}
			public static Num PutInRange(this Num n, Num min, Num max)
			{
				if (n < min)
					return min;
				if (n > max)
					return max;
				return n;
			}
		}
		public static bool IsInRangeExcludeHi<T>(this T num, T lo, T hi) where T: IComparable<T> { 
			return num.CompareTo(lo) >= 0 && num.CompareTo(hi) < 0;
		}
		public static bool IsInRange<T>(this T num, T lo, T hi) where T: IComparable<T> { 
			return num.CompareTo(lo) >= 0 && num.CompareTo(hi) <= 0;
		}
		public static T PutInRange<T>(this T n, T min, T max) where T : IComparable<T>
		{
			if (n.CompareTo(min) <= 0)
				return min;
			if (n.CompareTo(max) >= 0)
				return max;
			return n;
		}

		// Range creation methods
		unroll ((Num, M) in ((int, MathI), (uint, MathU), 
		                    (long, MathL), (ulong, MathUL),
							(float, MathF),(double,MathD),
							(FPI8, MathF8), (FPI16, MathF16)))
		{
			/// <summary>Returns a range from lo to hi that includes both lo and hi.</summary>
			public static NumRange<Num, M> Inclusive(Num lo, Num hi)
			{
				return new NumRange<Num, M>(lo, hi);
			}
			/// <summary>Returns a range from lo to hi that excludes hi by decreasing it by 1.</summary>
			public static NumRange<Num, M> ExcludeHi(Num lo, Num hi)
			{
				return new NumRange<Num, M>(lo, hi - 1);
			}
			/// <summary>Returns a range from lo to the MaxValue of the number type.</summary>
			public static NumRange<Num, M> StartingAt(Num lo)
			{
				return new NumRange<Num, M>(lo, Num.MaxValue);
			}
			/// <summary>Returns the same range as Incl(num, num).</summary>
			public static NumRange<Num, M> Only(Num num)
			{
				return new NumRange<Num, M>(num, num);
			}
		}
		unroll ((Num, M) in ((uint, MathU), (ulong, MathUL)))
		{
			public static NumRange<Num, M> UntilInclusive(Num hi)
			{
				return new NumRange<Num, M>(0, hi);
			}
			public static NumRange<Num, M> UntilExclusive(Num hi)
			{
				return new NumRange<Num, M>(0, hi - 1);
			}
		}
	}
}