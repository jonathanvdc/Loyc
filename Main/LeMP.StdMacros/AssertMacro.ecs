using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loyc;
using Loyc.Syntax;
using Loyc.Collections;
using S = Loyc.Syntax.CodeSymbols;

namespace LeMP
{
	partial class StandardMacros
	{
		use_symbols;

		static Symbol GetFnAndClassName(IMacroContext context, out LNode @class, out LNode fn)
		{
			@class = fn = null;
			var anc = context.Ancestors; // scan these to find function/property and class/struct/etc.
			for (int i = anc.Count - 1; i >= 0; i--) {
				var name = anc[i].Name;
				if (anc[i].ArgCount >= 2) {
					if (fn == null) {
						if (name == S.Fn || name == S.Property || name == S.Constructor || name == S.Event)
							fn = anc[i][1];
					}
					if (name == S.Struct || name == S.Class || name == S.Namespace || name == S.Interface || name == S.Trait || name == S.Alias) {
						@class = anc[i][0];
						return name;
					}
				}
			}
			return null;
		}

		static string GetFnAndClassNameString(IMacroContext context)
		{
			LNode @class, fn;
			GetFnAndClassName(context, out @class, out fn);
			var ps = ParsingService.Current;
			if (fn == null)
				return @class == null ? null : ps.Print(@class, null, ParsingService.Exprs);
			else if (@class == null)
				return ps.Print(fn, null, ParsingService.Exprs);
			else {
				while (fn.CallsMin(S.Dot, 2))
					fn = fn.Args.Last;
				return string.Format("{0}.{1}", ps.Print(@class, null, ParsingService.Exprs),
				                                ps.Print(fn, null, ParsingService.Exprs));
			}
		}

		static readonly LNode defaultAssertMethod = quote(System.Diagnostics.Debug.Assert);

		internal static LNode GetAssertMethod(IMacroContext context) 
		{
			return (context.ScopedProperties.TryGetValue(@@#assertMethod, null) as LNode) ?? defaultAssertMethod;
		}

		[LexicalMacro(@"assert(condition);", 
			"Translates assert(expr) to System.Diagnostics.Debug.Assert(expr, \"Assertion failed in Class.MethodName: expr\"). "
			+"You can change the assert method with `#snippet` as follows:\n\n"
			+"    #snippet #assertMethod = System.Diagnostics.Debug.Assert; // default", 
			"assert")]
		public static LNode _assert(LNode node, IMacroContext context)
		{
			if (node.ArgCount > 0) {
				var results = LNode.List();
				foreach (var condition in node.Args) {
					string name = GetFnAndClassNameString(context) ?? "";
					var ps = ParsingService.Current;
					LNode condStr = F.Literal(string.Format("Assertion failed in `{0}`: {1}", 
						name, ps.Print(condition, context.Sink, ParsingService.Exprs)));
				
					var assertFn = GetAssertMethod(context);
					if (assertFn.IsIdNamed(node.Name))
						return null; // disabled!
					results.Add(quote($assertFn($condition, $condStr)));
				}
				return results.AsLNode(S.Splice);
			}
			return null;
		}
	}
}