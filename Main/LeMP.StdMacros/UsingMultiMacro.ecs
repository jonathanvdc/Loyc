using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loyc;             // For Symbol
using Loyc.Collections; // For VList<LNode>
using Loyc.Syntax;      // For LNode
using Loyc.Ecs;         // For EcsLanguageService
using S = Loyc.Syntax.CodeSymbols;

namespace LeMP
{
	partial class StandardMacros
	{
		[LexicalMacro("using System(, .Collections.Generic, .Linq, .Text);", 
			"Generates multiple using-statements from a single one.", 
			"#import", Mode = MacroMode.Passive | MacroMode.Normal)]
		public static LNode UsingMulti(LNode stmt, IMacroContext context)
		{
			matchCode (stmt) {
			case { using $multiNamespace; }:
				try {
					var list = GetNamespaces(stmt[0]);
					if (list == null)
						return null;
					return quote(#splice(
						$(.. list.Select(namespc => (LNode)quote { using $namespc; }))
					));
				} catch (LogException exc) {
					exc.Msg.WriteTo(context.Sink);
				}
			}
			return null;
		}

		static IEnumerable<LNode> GetNamespaces(LNode multiName) {
			matchCode(multiName) {
				case @`.`($(.._)), #of($(.._)):
					// ignore complex identifier
				case $outerNamespace($(..args)):
					// Allow Namespace { stuff; } as alternate notation; just ignore the braces
					if (args.Count == 1 && args[0].Calls(S.Braces))
						args = args[0].Args;

					return args.SelectMany(arg => GetNamespaces(arg) ?? ListExt.Single(arg))
					           .Select(subNS => MergeIdentifiers(outerNamespace, subNS));
			}
			return null;
		}
		static LNode MergeIdentifiers(LNode left, LNode right)
		{
			if (left == null)
				return right;
			if (right.IsIdNamed(S.Missing))
				return left;
			matchCode (right) {
				case .$right2:
					return quote($left . $right2);
				case $right1.$right2:
					return quote($(MergeIdentifiers(left, right1)) . $right2);
				default:
					throw new LogException(Severity.Note, right, "Multi-using statement seems malformed. Correct example: `using System(.Text, .Linq));`");
			}
		}
	}
}

