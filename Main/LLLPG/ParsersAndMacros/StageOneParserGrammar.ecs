using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Loyc.Syntax;
using Loyc.Utilities;
using Loyc.Collections;
using Loyc.Collections.Impl;
using Loyc.Syntax.Lexing;

namespace Loyc.LLParserGenerator
{
	using TT = TokenType;
	using S = CodeSymbols;

	internal partial class StageOneParser
	{
		[FullLLk] [Verbosity(3)]
		LLLPG(parser(laType(TT), matchType(int), allowSwitch(true), terminalType(Token)))
		{
			alias("("   = TT.LParen);
			alias(")"   = TT.RParen);
			alias("["   = TT.LBrack);
			alias("]"   = TT.RBrack);
			alias("{"   = TT.LBrace);
			alias("}"   = TT.RBrace);
			// Operators of LLLPG in order of precedence:
			alias("."   = TT.Dot);
			alias("-"   = TT.Minus);
			alias("..." = TT.DotDotDot);
			alias("~"   = TT.InvertSet);
			alias("&"   = TT.And);
			alias("&!"  = TT.AndNot);
			alias(":="  = TT.Assignment);
			alias("+"   = TT.Plus);
			alias("*"   = TT.Star);
			alias("?"   = TT.QMark);
			alias("!"   = TT.Bang);
			alias(","   = TT.Separator);
			alias("=>,<=>" = TT.Arrow);
			alias("|"   = TT.Alt);
			alias("/"   = TT.Slash);
			
			// Replaces 'a' with the LNode for the infix expression a`op`b (e.g. a | b)
			void Infix(ref LNode a, Symbol op, LNode b) {
				a = F.Call(op, a, b, a.Range.StartIndex, b.Range.EndIndex);
			}

			public rule LNode Parse @[ e:=Expr EOF {return e;} ];
			
			/*
			LLLPG(lexer(...)) @{
				Spaces: (' '|'\t')*;
				SLComment:
					"//" (~('\r'|'\n'))*
					{_value = WhitespaceTag.Value;};
			};
			rule Rule() @{
				(	lb:="[" rb:="]" {return ParseBraces(lb, rb.EndIndex, true);} )?
				ids+:TT.Id ":" Expr ";"
			};
			*/
			
			////////////////////////////////////////////////////////////////////

			// Top-level rule body expression: a | b | ...
			private rule LNode Expr() @[
				a:=SlashExpr
				( op:="|" b:=SlashExpr {Infix(ref a, (Symbol) op.Value, b);} )*
				{return a;}
			];
			private rule LNode SlashExpr() @[
				a:=GateExpr 
				( op:="/" b:=GateExpr {Infix(ref a, (Symbol) op.Value, b);} )*
				{return a;}
			];
			private rule LNode GateExpr() @[
				{Token? altType = null;}
				(altType=(TT.Default|TT.Error))?
				a:=SeqExpr
				( op:="=>,<=>" b:=GateExpr {Infix(ref a, (Symbol) op.Value, b);} )?
				{
					if (altType != null)
						a = F.Call((Symbol) altType.Value.Value, a, altType.Value.StartIndex, altType.Value.EndIndex);
					return a;
				}
			];
			private rule LNode SeqExpr() @[
				{var seq = LNode.List();}
				(seq+=LoopExpr ","?)*
				{
					if (seq.Count == 1) return seq[0];
					else if (seq.IsEmpty) return F.Tuple();
					return F.Tuple(seq, seq[0].Range.StartIndex, seq.Last.Range.EndIndex);
				}
			];
			private rule LNode LoopExpr() @[
				{LNode a;}
				(	loopMod:=(TT.Greedy|TT.Nongreedy) a=AssignExpr 
					{a = F.Call((Symbol) loopMod.Value, a, loopMod.StartIndex, a.Range.EndIndex);}
				|	a=AssignExpr
				)
				(	op:="*" {a = F.Call(_SufStar, a, a.Range.StartIndex, op.EndIndex);}
				|	op:="+" {a = F.Call(_SufPlus, a, a.Range.StartIndex, op.EndIndex);}
				|	op:="?" {a = F.Call(_SufOpt,  a, a.Range.StartIndex, op.EndIndex);}
				)?
				{return a;}
			];
			
			private rule LNode AssignExpr() @[
				{Token op;}
				a:=PrefixExpr
				( op="!" {a = F.Call(_SufBang, a, a.Range.StartIndex, op.EndIndex);} )*
				( op=(":="|TT.HostOperator) b:=AssignExpr {Infix(ref a, (Symbol) op.Value, b);} )?
				{return a;}
			];
			
			private rule LNode PrefixExpr() @
			[	op:="~"       r:=PrefixExpr         {return F.Call(S.NotBits, r, op.StartIndex, r.Range.EndIndex);}
			|	op:="&"       r:=PrefixExprOrBraces {return F.Call(S.AndBits, r, op.StartIndex, r.Range.EndIndex);}
			|	op:=("&!")    r:=PrefixExprOrBraces {return F.Call(_AndNot,   r, op.StartIndex, r.Range.EndIndex);}
			|	r:=RangeExpr  {return r;}
			];
			private rule LNode PrefixExprOrBraces() @
			[	lb:="{" rb:="}" {return ParseBraces(lb, rb.EndIndex, true);}
			/	e:=PrefixExpr   {return e;}
			];
			
			private rule LNode RangeExpr() @[
				a:=PrimaryExpr 
				( op:="..." b:=PrimaryExpr {Infix(ref a, (Symbol) op.Value, b);} )?
				{return a;}
			];
			
			private rule LNode PrimaryExpr() @
				[	"-" e:=PrimaryExpr {return F.Call(S._Negate, e);}
				|	{LNode e, id;}
					TT.Any TT.Id {id = F.Id($(TT.Id));}
					( TT.In e=PrimaryExpr
					/ {e = id;})
					{e = F.Call(_Any, id, e, $(TT.Any).StartIndex, e.Range.EndIndex);}
					{return e;}
				|	a:=Atom
					greedy(
						// dotted expr
						op:="." b:=Atom {Infix(ref a, (Symbol)op.Value, b);}
					|	// rule call: no spaces between identifier and '('
						&{a.Range.EndIndex == LT($LI).StartIndex}
						lp:="(" rp:=")"
						{a = F.Call(a, ParseArgList(lp), a.Range.StartIndex, rp.EndIndex);}
					)*
					{return a;}
				];

			private rule LNode Atom() @[
				{LNode e;}
				(	t:=(TT.Id|TT.In)
					{e = F.Id(t);}
				|	t:=TT.Literal
					{e = F.Literal(t);}
				|	lp:="(" rp:=")"     {e = ParseParens(lp, rp.EndIndex);}
				|	lb:="{" rb:="}"     {e = ParseBraces(lb, rb.EndIndex, false);}
				|	lb:="[" rb:="]"
					&("?"|"*")          {e = ParseParens(lb, rb.EndIndex);}
				|	error {
						e = F.Id(S.Missing, LT0.StartIndex, LT0.StartIndex);
						Error(0, "LLLPG: Expected an identifier, literal, or expression in parenthesis");
					}
				)
				{return e;}
			];
		}
	}
}
